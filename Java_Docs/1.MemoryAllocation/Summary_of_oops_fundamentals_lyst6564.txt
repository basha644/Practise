class --> blue print

Object --> Instance 

Creation of Object --> Instantiation

new --> used to create object

Object --> Memory allocated inside Heap area

Customer cs = new Customer();
   1      2    3      4
Here,
1.Reference class : like what type of data/datatype we are taking/allowing. Only this class & parent one methods are allowable.
2.Object reference : By using this refference we can call global variable,method
3.storage allocation: whenever we call new keyword at that time new storage is allocated for that object
4.constructor of that class like default/parameterized
whenever object creation at that time compiler checks is constructor is available or not,
If not Compiler provides deafault constructor otherwise it uses available constructor  

While object creation first [new Customer();] will be intiated.



Instance variable --
  -> Created directly within a class
  -> Memory allocated inside heap(Within object)
  -> Default values are assigned
  -> Can be acccessed any where within class also outside class using obj ref if not private
  -> While object creation first Instance variable will be invoked in heap area  and assigned default values if not provided.

Local Variables --
 -> Created inside class within a method or loop or a block or constructor
 -> Memory is alloacted inside stack area
 -> Default values are not assigned 
 -> Can be accessed only withina method or block where ever they are defined. Scope is local

---------------------------------------------------------------------------------------
-->If we create object/instance memory is alloacted in Heap area.
-->If there is no refrence referring to object inside heap area then Garbage collector would collect the object
(In other words object memory is de allocated)

--> Whenever program is executed at that time main method creates a main thread in stack area, It is responsible to run entire statements one by one.
--> When ever we call a method or a block to execute then one stack will be created within stack atrea
---> when ever that method body or block body execution is over that stack will be deallocated from stack area
 
We can write methods in Java in four diffrent ways based on needs refer class board notes for same;
















